"""
SISTEMA PRINCIPAL DE EJERCICIOS - FUNDAMENTOS DE PYTHON
Fase 1 - Python Backend Development

Este sistema integra todos los ejercicios pr√°cticos para dominar:
- Sintaxis y tipos de datos
- Control de flujo  
- Bucles e iteraci√≥n

Creado siguiendo las mejores pr√°cticas profesionales.
"""

import sys
from pathlib import Path

# Agregar el directorio de ejercicios al path
sys.path.append(str(Path(__file__).parent / "exercises"))

try:
    from exercises.data_types import practice_data_types_system
    from exercises.control_flow import practice_control_flow_system  
    from exercises.loops import practice_loops_system
except ImportError as e:
    print(f"‚ùå Error importando m√≥dulos: {e}")
    print("Aseg√∫rate de que todos los archivos de ejercicios est√©n en su lugar.")
    sys.exit(1)


def show_welcome_message():
    """Muestra el mensaje de bienvenida y objetivos."""
    print("üöÄ" + "="*70 + "üöÄ")
    print("    SISTEMA DE EJERCICIOS PR√ÅCTICOS - FUNDAMENTOS DE PYTHON")
    print("                     Fase 1: Backend Development")
    print("üöÄ" + "="*70 + "üöÄ")
    print()
    print("üéØ OBJETIVOS DE APRENDIZAJE:")
    print("   ‚Ä¢ Dominar sintaxis y tipos de datos primitivos")
    print("   ‚Ä¢ Implementar l√≥gica de control de flujo profesional")  
    print("   ‚Ä¢ Usar bucles para procesar datos complejos")
    print("   ‚Ä¢ Aplicar mejores pr√°cticas desde el primer d√≠a")
    print()
    print("üí° ENFOQUE PROFESIONAL:")
    print("   ‚Ä¢ Ejercicios basados en casos reales de backend")
    print("   ‚Ä¢ T√©cnicas usadas en equipos de desarrollo senior")
    print("   ‚Ä¢ Preparaci√≥n para frameworks como Django/FastAPI")
    print()


def show_main_menu():
    """Muestra el men√∫ principal del sistema."""
    print("üìö M√ìDULOS DE PR√ÅCTICA DISPONIBLES:")
    print()
    print("1. üßÆ SINTAXIS Y TIPOS DE DATOS")
    print("   ‚Ä¢ Calculadora de salarios empresarial")
    print("   ‚Ä¢ Validador de datos de entrada")
    print("   ‚Ä¢ Procesador de texto avanzado")
    print("   ‚Ä¢ Comparador num√©rico con estad√≠sticas")
    print("   ‚Ä¢ Verificador de veracidad contextual")
    print()
    print("2. üîÄ CONTROL DE FLUJO")
    print("   ‚Ä¢ Juego 'Adivina el n√∫mero' multinivel")
    print("   ‚Ä¢ Sistema de autenticaci√≥n y autorizaci√≥n")
    print("   ‚Ä¢ Calculadora de descuentos empresarial")
    print("   ‚Ä¢ Refactorizaci√≥n con diccionarios")
    print("   ‚Ä¢ Sistema de evaluaci√≥n acad√©mica")
    print()
    print("3. üîÑ BUCLES E ITERACI√ìN")
    print("   ‚Ä¢ Procesador de datos empresariales")
    print("   ‚Ä¢ Generador de reportes de ventas")
    print("   ‚Ä¢ Sistema de gesti√≥n de inventario")
    print("   ‚Ä¢ Juego estad√≠stico avanzado")
    print("   ‚Ä¢ Procesador de listas de diccionarios")
    print()
    print("4. üìä EJECUTAR TODOS LOS M√ìDULOS")
    print("5. ‚ÑπÔ∏è  MOSTRAR INFORMACI√ìN DEL PROYECTO")
    print("6. üö™ SALIR")
    print()


def show_project_info():
    """Muestra informaci√≥n detallada del proyecto."""
    print("üìã INFORMACI√ìN DEL PROYECTO")
    print("="*50)
    print()
    print("üéØ PROP√ìSITO:")
    print("   Este sistema est√° dise√±ado para ense√±ar Python backend")
    print("   usando ejercicios pr√°cticos del mundo real, no ejemplos")
    print("   triviales. Cada ejercicio simula problemas que encontrar√°s")
    print("   en tu carrera como desarrollador backend.")
    print()
    print("üèóÔ∏è  ARQUITECTURA DEL PROYECTO:")
    print("   ‚Ä¢ src/exercises/data_types.py     - Tipos de datos")
    print("   ‚Ä¢ src/exercises/control_flow.py   - Control de flujo") 
    print("   ‚Ä¢ src/exercises/loops.py          - Bucles e iteraci√≥n")
    print("   ‚Ä¢ src/main.py                     - Sistema principal")
    print("   ‚Ä¢ tests/                          - Pruebas unitarias")
    print()
    print("üíº APLICACIONES PROFESIONALES:")
    print("   ‚Ä¢ Validaci√≥n de datos de APIs")
    print("   ‚Ä¢ Sistemas de autenticaci√≥n")
    print("   ‚Ä¢ Procesamiento de inventarios")
    print("   ‚Ä¢ C√°lculos financieros")
    print("   ‚Ä¢ Generaci√≥n de reportes")
    print()
    print("üìö PREPARACI√ìN PARA:")
    print("   ‚Ä¢ Django REST Framework")
    print("   ‚Ä¢ FastAPI")
    print("   ‚Ä¢ Desarrollo de microservicios")
    print("   ‚Ä¢ Sistemas de backend escalables")
    print()


def run_all_modules():
    """Ejecuta una demostraci√≥n r√°pida de todos los m√≥dulos."""
    print("üöÄ EJECUTANDO DEMOSTRACI√ìN DE TODOS LOS M√ìDULOS")
    print("="*60)
    
    print("\n1Ô∏è‚É£  M√ìDULO: SINTAXIS Y TIPOS DE DATOS")
    print("-" * 45)
    try:
        from exercises.data_types import salary_calculator, validate_user_input
        
        # Demo r√°pida de calculadora de salarios
        result = salary_calculator(75000.0, 10, True, "demo user")
        print(f"‚úÖ Demo Calculadora de Salarios:")
        print(f"   Empleado: {result['employee']}")
        print(f"   Salario total: {result['total_salary']}")
        
        # Demo r√°pida de validador
        validation = validate_user_input(25, "demo@example.com", 85.5)
        print(f"‚úÖ Demo Validador de Datos:")
        print(f"   Resultado: {validation['summary']}")
        
    except Exception as e:
        print(f"‚ùå Error en m√≥dulo de tipos de datos: {e}")
    
    print("\n2Ô∏è‚É£  M√ìDULO: CONTROL DE FLUJO")
    print("-" * 40)
    try:
        from exercises.control_flow import authentication_system, enterprise_discount_calculator
        
        # Demo r√°pida de autenticaci√≥n
        auth_result = authentication_system("admin", "admin123")
        print(f"‚úÖ Demo Sistema de Autenticaci√≥n:")
        print(f"   Usuario: {auth_result.get('username', 'N/A')}")
        print(f"   Estado: {'Exitoso' if auth_result.get('success') else 'Fallido'}")
        
        # Demo r√°pida de descuentos
        discount_result = enterprise_discount_calculator(100.0, "vip", 15, "regular")
        print(f"‚úÖ Demo Calculadora de Descuentos:")
        print(f"   Precio final: {discount_result['calculation_details']['final_price']}")
        print(f"   Descuento: {discount_result['calculation_details']['discount_percentage']}")
        
    except Exception as e:
        print(f"‚ùå Error en m√≥dulo de control de flujo: {e}")
    
    print("\n3Ô∏è‚É£  M√ìDULO: BUCLES E ITERACI√ìN")
    print("-" * 38)
    try:
        from exercises.loops import advanced_dict_processor
        
        # Demo r√°pida de procesador de diccionarios
        sample_data = [
            {"name": "Juan", "age": 30, "salary": 50000},
            {"name": "Mar√≠a", "age": 25, "salary": 45000}
        ]
        
        result = advanced_dict_processor(sample_data, ["count", "aggregate"])
        print(f"‚úÖ Demo Procesador de Diccionarios:")
        if "count_analysis" in result:
            print(f"   Items procesados: {result['count_analysis']['total_items']}")
        if "aggregations" in result and "salary" in result["aggregations"]:
            avg_salary = result["aggregations"]["salary"]["average"]
            print(f"   Salario promedio: ${avg_salary:,.2f}")
        
    except Exception as e:
        print(f"‚ùå Error en m√≥dulo de bucles: {e}")
    
    print(f"\nüéâ DEMOSTRACI√ìN COMPLETADA")
    print("üí° Para ejercicios interactivos completos, selecciona m√≥dulos individuales.")


def main():
    """Funci√≥n principal del sistema."""
    show_welcome_message()
    
    while True:
        try:
            show_main_menu()
            choice = input("üéØ Selecciona una opci√≥n (1-6): ").strip()
            
            print("\n" + "="*80 + "\n")
            
            if choice == "1":
                print("üßÆ INICIANDO M√ìDULO: SINTAXIS Y TIPOS DE DATOS")
                print("-" * 55)
                practice_data_types_system()
                
            elif choice == "2":
                print("üîÄ INICIANDO M√ìDULO: CONTROL DE FLUJO")
                print("-" * 45)
                practice_control_flow_system()
                
            elif choice == "3":
                print("üîÑ INICIANDO M√ìDULO: BUCLES E ITERACI√ìN")
                print("-" * 48)
                practice_loops_system()
                
            elif choice == "4":
                run_all_modules()
                
            elif choice == "5":
                show_project_info()
                
            elif choice == "6":
                print("üëã ¬°Gracias por usar el sistema de ejercicios!")
                print("üéØ Contin√∫a practicando para dominar Python backend.")
                print("üöÄ ¬°√âxito en tu carrera como desarrollador!")
                break
                
            else:
                print("‚ùå Opci√≥n no v√°lida. Por favor, elige entre 1-6.")
            
            # Pausa antes de mostrar el men√∫ nuevamente
            input("\nüì± Presiona Enter para continuar...")
            print("\n" + "üîÑ"*30 + " REGRESANDO AL MEN√ö PRINCIPAL " + "üîÑ"*30 + "\n")
            
        except KeyboardInterrupt:
            print("\n\nüëã Programa interrumpido por el usuario.")
            print("¬°Hasta luego!")
            break
        except Exception as e:
            print(f"‚ùå Error inesperado: {e}")
            print("Por favor, reporta este error.")


if __name__ == "__main__":
    main()