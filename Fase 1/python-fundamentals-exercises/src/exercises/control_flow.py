"""
EJERCICIOS PR√ÅCTICOS: CONTROL DE FLUJO
Fase 1 - Fundamentos de Python Backend

Objetivos de Aprendizaje:
1. Dominar estructuras de control if/elif/else
2. Implementar l√≥gica de negocio con decisiones complejas
3. Refactorizar c√≥digo usando diccionarios para despacho
4. Aplicar mejores pr√°cticas en estructuras condicionales
"""

import random
from typing import Dict, List, Any


# EJERCICIO 1: Juego "Adivina el n√∫mero" (Mejorado)
def guess_the_number_advanced():
    """
    Juego con m√∫ltiples niveles de dificultad.
    """
    print("üéØ ¬°BIENVENIDO AL JUEGO 'ADIVINA EL N√öMERO' AVANZADO! üéØ")
    print("\nSelecciona tu nivel de dificultad:")
    print("1. F√°cil (1-50, 15 intentos)")
    print("2. Medio (1-100, 10 intentos)")
    print("3. Dif√≠cil (1-200, 7 intentos)")
    print("4. Extremo (1-500, 5 intentos)")
    
    # Control de flujo para selecci√≥n de dificultad
    while True:
        try:
            level = int(input("\nElige tu nivel (1-4): "))
            if level in [1, 2, 3, 4]:
                break
            else:
                print("‚ùå Por favor, elige un n√∫mero entre 1 y 4.")
        except ValueError:
            print("‚ùå Por favor, ingresa un n√∫mero v√°lido.")
    
    # Configuraci√≥n basada en nivel (usando diccionario)
    difficulty_config = {
        1: {"max_num": 50, "attempts": 15, "name": "F√°cil"},
        2: {"max_num": 100, "attempts": 10, "name": "Medio"},
        3: {"max_num": 200, "attempts": 7, "name": "Dif√≠cil"},
        4: {"max_num": 500, "attempts": 5, "name": "Extremo"}
    }
    
    config = difficulty_config[level]
    number_to_guess = random.randint(1, config["max_num"])
    attempts_left = config["attempts"]
    
    print(f"\nüéÆ Nivel: {config['name']}")
    print(f"üìä Rango: 1-{config['max_num']}")
    print(f"üéØ Intentos disponibles: {attempts_left}")
    print("¬°Comencemos!")
    
    attempt_history = []
    
    for attempt in range(config["attempts"]):
        attempts_left = config["attempts"] - attempt
        print(f"\n--- Intento {attempt + 1} de {config['attempts']} ---")
        
        try:
            guess = int(input(f"Tu adivinanza (1-{config['max_num']}): "))
            
            # Validaci√≥n del rango
            if guess < 1 or guess > config["max_num"]:
                print(f"‚ö†Ô∏è  N√∫mero fuera de rango! Debe estar entre 1 y {config['max_num']}")
                continue
                
            attempt_history.append(guess)
            
            # L√≥gica principal del juego
            if guess < number_to_guess:
                difference = number_to_guess - guess
                if difference > 50:
                    print("üìà ¬°MUCHO m√°s alto!")
                elif difference > 20:
                    print("üìà M√°s alto")
                else:
                    print("üìà Un poco m√°s alto")
                    
            elif guess > number_to_guess:
                difference = guess - number_to_guess
                if difference > 50:
                    print("üìâ ¬°MUCHO m√°s bajo!")
                elif difference > 20:
                    print("üìâ M√°s bajo")
                else:
                    print("üìâ Un poco m√°s bajo")
                    
            else:
                # ¬°Victoria!
                print(f"\nüéâ ¬°FELICIDADES! üéâ")
                print(f"üèÜ Has adivinado el n√∫mero {number_to_guess} en {attempt + 1} intentos!")
                print(f"üìà Historial de intentos: {attempt_history}")
                
                # Puntuaci√≥n basada en intentos restantes
                score = (attempts_left - 1) * 10
                print(f"‚≠ê Puntuaci√≥n: {score} puntos")
                return True
                
        except ValueError:
            print("‚ùå Por favor, ingresa un n√∫mero v√°lido.")
            continue
    
    # Si se acabaron los intentos
    print(f"\nüíî ¬°Se acabaron los intentos!")
    print(f"üéØ El n√∫mero era: {number_to_guess}")
    print(f"üìà Tu historial: {attempt_history}")
    return False


# EJERCICIO 2: Sistema de autenticaci√≥n y autorizaci√≥n
def authentication_system(username: str, password: str, role: str = "user") -> Dict[str, Any]:
    """
    Sistema de autenticaci√≥n con diferentes niveles de acceso.
    
    Args:
        username: Nombre de usuario
        password: Contrase√±a
        role: Rol del usuario (user, admin, moderator)
    
    Returns:
        dict: Resultado de la autenticaci√≥n
    """
    # Base de datos simulada de usuarios
    users_db = {
        "admin": {"password": "admin123", "role": "admin"},
        "moderator": {"password": "mod123", "role": "moderator"},
        "user1": {"password": "user123", "role": "user"},
        "user2": {"password": "pass456", "role": "user"},
        "guest": {"password": "guest", "role": "guest"}
    }
    
    # Validaciones b√°sicas
    if not username or not password:
        return {
            "success": False,
            "message": "Usuario y contrase√±a son requeridos",
            "access_level": "none"
        }
    
    # Verificaci√≥n de existencia del usuario
    if username not in users_db:
        return {
            "success": False,
            "message": "Usuario no encontrado",
            "access_level": "none"
        }
    
    # Verificaci√≥n de contrase√±a
    if users_db[username]["password"] != password:
        return {
            "success": False,
            "message": "Contrase√±a incorrecta",
            "access_level": "none"
        }
    
    # Usuario autenticado - determinar permisos
    user_role = users_db[username]["role"]
    
    # Sistema de permisos usando if/elif/else
    if user_role == "admin":
        permissions = ["read", "write", "delete", "manage_users", "system_config"]
        dashboard_url = "/admin-dashboard"
        message = "Bienvenido, Administrador. Acceso completo al sistema."
    elif user_role == "moderator":
        permissions = ["read", "write", "moderate_content", "manage_comments"]
        dashboard_url = "/moderator-dashboard"
        message = "Bienvenido, Moderador. Acceso a funciones de moderaci√≥n."
    elif user_role == "user":
        permissions = ["read", "write_own", "comment"]
        dashboard_url = "/user-dashboard"
        message = "Bienvenido, Usuario. Acceso est√°ndar al sistema."
    else:  # guest
        permissions = ["read"]
        dashboard_url = "/guest-dashboard"
        message = "Bienvenido, Invitado. Acceso de solo lectura."
    
    return {
        "success": True,
        "message": message,
        "username": username,
        "role": user_role,
        "permissions": permissions,
        "dashboard_url": dashboard_url,
        "access_level": "full" if user_role in ["admin", "moderator"] else "limited"
    }


# EJERCICIO 3: Calculadora de descuentos empresarial
def enterprise_discount_calculator(price: float, customer_type: str, quantity: int, season: str = "regular") -> Dict[str, Any]:
    """
    Calcula descuentos basados en m√∫ltiples criterios empresariales.
    
    Args:
        price: Precio base del producto
        customer_type: Tipo de cliente (vip, premium, regular, new)
        quantity: Cantidad de productos
        season: Temporada (regular, black_friday, christmas, summer_sale)
    
    Returns:
        dict: Detalles del c√°lculo de descuento
    """
    if price <= 0 or quantity <= 0:
        return {"error": "Precio y cantidad deben ser mayores a 0"}
    
    # Descuentos base por tipo de cliente
    if customer_type == "vip":
        base_discount = 0.20  # 20%
        customer_tier = "VIP"
    elif customer_type == "premium":
        base_discount = 0.15  # 15%
        customer_tier = "Premium"
    elif customer_type == "regular":
        base_discount = 0.05  # 5%
        customer_tier = "Regular"
    elif customer_type == "new":
        base_discount = 0.10  # 10% (descuento especial para nuevos)
        customer_tier = "Nuevo Cliente"
    else:
        base_discount = 0.0
        customer_tier = "Sin clasificar"
    
    # Descuentos por cantidad (escalonados)
    if quantity >= 100:
        quantity_discount = 0.15  # 15%
        quantity_tier = "Mayorista"
    elif quantity >= 50:
        quantity_discount = 0.10  # 10%
        quantity_tier = "Medio Mayorista"
    elif quantity >= 20:
        quantity_discount = 0.07  # 7%
        quantity_tier = "Volumen Alto"
    elif quantity >= 10:
        quantity_discount = 0.05  # 5%
        quantity_tier = "Volumen Medio"
    else:
        quantity_discount = 0.0
        quantity_tier = "Volumen Bajo"
    
    # Descuentos estacionales
    seasonal_discounts = {
        "black_friday": 0.25,    # 25%
        "christmas": 0.20,       # 20%
        "summer_sale": 0.15,     # 15%
        "regular": 0.0           # 0%
    }
    
    seasonal_discount = seasonal_discounts.get(season, 0.0)
    
    # C√°lculo del descuento total (no acumulativo directo, aplicado en cascada)
    subtotal = price * quantity
    
    # Aplicar descuento de cliente
    after_customer_discount = subtotal * (1 - base_discount)
    customer_savings = subtotal - after_customer_discount
    
    # Aplicar descuento por cantidad sobre el subtotal ya descontado
    after_quantity_discount = after_customer_discount * (1 - quantity_discount)
    quantity_savings = after_customer_discount - after_quantity_discount
    
    # Aplicar descuento estacional sobre el resultado anterior
    final_price = after_quantity_discount * (1 - seasonal_discount)
    seasonal_savings = after_quantity_discount - final_price
    
    total_savings = subtotal - final_price
    total_discount_percentage = (total_savings / subtotal) * 100
    
    return {
        "calculation_details": {
            "original_price": f"${price:.2f}",
            "quantity": quantity,
            "subtotal": f"${subtotal:.2f}",
            "final_price": f"${final_price:.2f}",
            "total_savings": f"${total_savings:.2f}",
            "discount_percentage": f"{total_discount_percentage:.1f}%"
        },
        "customer_info": {
            "type": customer_type,
            "tier": customer_tier,
            "discount": f"{base_discount*100:.0f}%",
            "savings": f"${customer_savings:.2f}"
        },
        "quantity_info": {
            "quantity": quantity,
            "tier": quantity_tier,
            "discount": f"{quantity_discount*100:.0f}%",
            "savings": f"${quantity_savings:.2f}"
        },
        "seasonal_info": {
            "season": season,
            "discount": f"{seasonal_discount*100:.0f}%",
            "savings": f"${seasonal_savings:.2f}"
        },
        "recommendation": get_purchase_recommendation(total_discount_percentage)
    }


def get_purchase_recommendation(discount_percentage: float) -> str:
    """Genera recomendaci√≥n basada en el descuento total."""
    if discount_percentage >= 40:
        return "üî• ¬°EXCELENTE OFERTA! Es el momento perfecto para comprar."
    elif discount_percentage >= 25:
        return "üëç Muy buena oferta. Recomendamos aprovechar."
    elif discount_percentage >= 15:
        return "‚úÖ Oferta decente. Considera comprar si necesitas el producto."
    elif discount_percentage >= 5:
        return "üìä Descuento b√°sico aplicado."
    else:
        return "üí° Sin descuentos especiales. Precio regular."


# EJERCICIO 4: Refactorizaci√≥n usando diccionarios (Mejor pr√°ctica)
def status_checker_old_way(status_code: int) -> str:
    """
    Forma ANTIGUA de manejar c√≥digos de estado (NO recomendada).
    Esta es la forma que debes EVITAR.
    """
    if status_code == 200:
        return "OK - Solicitud exitosa"
    elif status_code == 201:
        return "Created - Recurso creado"
    elif status_code == 400:
        return "Bad Request - Solicitud incorrecta"
    elif status_code == 401:
        return "Unauthorized - No autorizado"
    elif status_code == 403:
        return "Forbidden - Prohibido"
    elif status_code == 404:
        return "Not Found - No encontrado"
    elif status_code == 500:
        return "Internal Server Error - Error del servidor"
    elif status_code == 502:
        return "Bad Gateway - Gateway incorrecto"
    elif status_code == 503:
        return "Service Unavailable - Servicio no disponible"
    else:
        return "Unknown Status - Estado desconocido"


def status_checker_new_way(status_code: int) -> Dict[str, Any]:
    """
    Forma MODERNA y EFICIENTE usando diccionarios (RECOMENDADA).
    Esta es la forma profesional de hacerlo.
    """
    # Diccionario de despacho - mucho m√°s limpio y eficiente
    status_codes = {
        200: {"message": "OK", "description": "Solicitud exitosa", "category": "success"},
        201: {"message": "Created", "description": "Recurso creado", "category": "success"},
        400: {"message": "Bad Request", "description": "Solicitud incorrecta", "category": "client_error"},
        401: {"message": "Unauthorized", "description": "No autorizado", "category": "client_error"},
        403: {"message": "Forbidden", "description": "Prohibido", "category": "client_error"},
        404: {"message": "Not Found", "description": "No encontrado", "category": "client_error"},
        500: {"message": "Internal Server Error", "description": "Error del servidor", "category": "server_error"},
        502: {"message": "Bad Gateway", "description": "Gateway incorrecto", "category": "server_error"},
        503: {"message": "Service Unavailable", "description": "Servicio no disponible", "category": "server_error"}
    }
    
    # Obtener informaci√≥n del c√≥digo o usar valores por defecto
    status_info = status_codes.get(status_code, {
        "message": "Unknown Status",
        "description": "Estado desconocido",
        "category": "unknown"
    })
    
    # A√±adir informaci√≥n adicional
    status_info["code"] = status_code
    status_info["is_success"] = status_code < 400
    status_info["is_client_error"] = 400 <= status_code < 500
    status_info["is_server_error"] = status_code >= 500
    
    return status_info


# EJERCICIO 5: Sistema de evaluaci√≥n acad√©mica
def academic_grade_system(scores: List[float], student_name: str) -> Dict[str, Any]:
    """
    Sistema complejo de evaluaci√≥n acad√©mica con m√∫ltiples criterios.
    
    Args:
        scores: Lista de calificaciones (0-100)
        student_name: Nombre del estudiante
    
    Returns:
        dict: Evaluaci√≥n completa del estudiante
    """
    if not scores or not all(0 <= score <= 100 for score in scores):
        return {"error": "Todas las calificaciones deben estar entre 0 y 100"}
    
    # C√°lculos b√°sicos
    average = sum(scores) / len(scores)
    max_score = max(scores)
    min_score = min(scores)
    
    # Determinaci√≥n de la letra de calificaci√≥n usando if/elif/else
    if average >= 95:
        letter_grade = "A+"
        performance = "Excelente"
        status = "Aprobado con Distinci√≥n"
    elif average >= 90:
        letter_grade = "A"
        performance = "Sobresaliente"
        status = "Aprobado con M√©rito"
    elif average >= 85:
        letter_grade = "B+"
        performance = "Muy Bueno"
        status = "Aprobado"
    elif average >= 80:
        letter_grade = "B"
        performance = "Bueno"
        status = "Aprobado"
    elif average >= 75:
        letter_grade = "C+"
        performance = "Satisfactorio"
        status = "Aprobado"
    elif average >= 70:
        letter_grade = "C"
        performance = "Suficiente"
        status = "Aprobado"
    elif average >= 60:
        letter_grade = "D"
        performance = "Deficiente"
        status = "Reprobado"
    else:
        letter_grade = "F"
        performance = "Insuficiente"
        status = "Reprobado"
    
    # An√°lisis de consistencia
    score_range = max_score - min_score
    if score_range <= 5:
        consistency = "Muy Consistente"
    elif score_range <= 15:
        consistency = "Consistente"
    elif score_range <= 25:
        consistency = "Moderadamente Consistente"
    else:
        consistency = "Inconsistente"
    
    # Recomendaciones
    if average >= 90:
        recommendation = "Contin√∫a con el excelente trabajo. Considera cursos avanzados."
    elif average >= 80:
        recommendation = "Buen rendimiento. Mant√©n el esfuerzo constante."
    elif average >= 70:
        recommendation = "Rendimiento aceptable. Busca apoyo en √°reas d√©biles."
    else:
        recommendation = "Necesitas mejorar significativamente. Considera tutor√≠a adicional."
    
    return {
        "student_info": {
            "name": student_name.title(),
            "total_assignments": len(scores),
            "status": status
        },
        "scores_analysis": {
            "individual_scores": scores,
            "average": round(average, 2),
            "max_score": max_score,
            "min_score": min_score,
            "range": score_range,
            "consistency": consistency
        },
        "grade_info": {
            "letter_grade": letter_grade,
            "performance_level": performance,
            "passed": average >= 70
        },
        "recommendation": recommendation
    }


# EJERCICIO 6: Sistema integrado de pr√°ctica
def practice_control_flow_system():
    """
    Sistema integrado para practicar todos los conceptos de control de flujo.
    """
    print("üéØ === SISTEMA DE PR√ÅCTICA: CONTROL DE FLUJO === üéØ\n")
    
    while True:
        print("Selecciona un ejercicio:")
        print("1. üéÆ Juego 'Adivina el N√∫mero' Avanzado")
        print("2. üîê Sistema de Autenticaci√≥n")
        print("3. üí∞ Calculadora de Descuentos Empresarial")
        print("4. üìä Comparaci√≥n de M√©todos (if/elif vs diccionarios)")
        print("5. üéì Sistema de Evaluaci√≥n Acad√©mica")
        print("6. üèÉ Salir")
        
        try:
            choice = int(input("\nTu elecci√≥n (1-6): "))
            print("-" * 50)
            
            if choice == 1:
                guess_the_number_advanced()
                
            elif choice == 2:
                print("DEMO: Sistema de Autenticaci√≥n")
                test_users = [
                    ("admin", "admin123"),
                    ("user1", "user123"),
                    ("guest", "guest"),
                    ("invalid", "wrong")
                ]
                
                for username, password in test_users:
                    result = authentication_system(username, password)
                    print(f"\nUsuario: {username}")
                    print(f"Resultado: {result['message']}")
                    if result['success']:
                        print(f"Permisos: {', '.join(result['permissions'])}")
                        
            elif choice == 3:
                print("DEMO: Calculadora de Descuentos")
                # Ejemplo de c√°lculo
                result = enterprise_discount_calculator(100.0, "vip", 25, "black_friday")
                print(f"\nProducto: $100.00 x 25 unidades")
                print(f"Cliente VIP en Black Friday")
                print(f"Precio final: {result['calculation_details']['final_price']}")
                print(f"Ahorro total: {result['calculation_details']['total_savings']}")
                print(f"Descuento: {result['calculation_details']['discount_percentage']}")
                print(f"Recomendaci√≥n: {result['recommendation']}")
                
            elif choice == 4:
                print("DEMO: Comparaci√≥n de M√©todos")
                test_codes = [200, 404, 500, 999]
                
                print("\n--- M√©todo ANTIGUO (if/elif/else) ---")
                for code in test_codes:
                    result = status_checker_old_way(code)
                    print(f"C√≥digo {code}: {result}")
                
                print("\n--- M√©todo MODERNO (diccionarios) ---")
                for code in test_codes:
                    result = status_checker_new_way(code)
                    print(f"C√≥digo {code}: {result['message']} - {result['description']}")
                    
            elif choice == 5:
                print("DEMO: Sistema de Evaluaci√≥n Acad√©mica")
                sample_scores = [88, 92, 85, 90, 87]
                result = academic_grade_system(sample_scores, "Ana Garc√≠a")
                
                print(f"\nEstudiante: {result['student_info']['name']}")
                print(f"Calificaciones: {result['scores_analysis']['individual_scores']}")
                print(f"Promedio: {result['scores_analysis']['average']}")
                print(f"Calificaci√≥n: {result['grade_info']['letter_grade']} ({result['grade_info']['performance_level']})")
                print(f"Estado: {result['student_info']['status']}")
                print(f"Recomendaci√≥n: {result['recommendation']}")
                
            elif choice == 6:
                print("¬°Gracias por practicar! üéâ")
                break
                
            else:
                print("‚ùå Opci√≥n no v√°lida. Elige entre 1-6.")
                
        except ValueError:
            print("‚ùå Por favor, ingresa un n√∫mero v√°lido.")
        
        print("\n" + "="*50 + "\n")


# Ejemplo de uso y testing
if __name__ == "__main__":
    print("üöÄ Iniciando sistema de pr√°ctica de Control de Flujo...")
    practice_control_flow_system()