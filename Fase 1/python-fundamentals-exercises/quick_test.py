#!/usr/bin/env python3
"""
SCRIPT DE VERIFICACI√ìN R√ÅPIDA
Verifica que todas las funciones principales est√©n funcionando correctamente.
"""

import sys
from pathlib import Path

# Agregar src al path
sys.path.append(str(Path(__file__).parent / "src"))

def test_imports():
    """Prueba que todos los m√≥dulos se puedan importar."""
    print("üîç Verificando importaciones...")
    
    try:
        from exercises.data_types import salary_calculator
        print("‚úÖ data_types.py - OK")
    except ImportError as e:
        print(f"‚ùå data_types.py - Error: {e}")
        return False
    
    try:
        from exercises.control_flow import authentication_system
        print("‚úÖ control_flow.py - OK")
    except ImportError as e:
        print(f"‚ùå control_flow.py - Error: {e}")
        return False
    
    try:
        from exercises.loops import advanced_dict_processor
        print("‚úÖ loops.py - OK")
    except ImportError as e:
        print(f"‚ùå loops.py - Error: {e}")
        return False
    
    return True

def test_basic_functionality():
    """Prueba funcionalidad b√°sica de cada m√≥dulo."""
    print("\nüß™ Probando funcionalidad b√°sica...")
    
    try:
        from exercises.data_types import salary_calculator
        result = salary_calculator(50000, 10, True, "test user")
        assert isinstance(result, dict)
        assert 'employee' in result
        print("‚úÖ Calculadora de salarios - OK")
    except Exception as e:
        print(f"‚ùå Calculadora de salarios - Error: {e}")
        return False
    
    try:
        from exercises.control_flow import authentication_system
        result = authentication_system("admin", "admin123")
        assert isinstance(result, dict)
        assert 'success' in result
        print("‚úÖ Sistema de autenticaci√≥n - OK")
    except Exception as e:
        print(f"‚ùå Sistema de autenticaci√≥n - Error: {e}")
        return False
    
    try:
        from exercises.loops import advanced_dict_processor
        result = advanced_dict_processor([{"test": 1}], ["count"])
        assert isinstance(result, dict)
        print("‚úÖ Procesador de diccionarios - OK")
    except Exception as e:
        print(f"‚ùå Procesador de diccionarios - Error: {e}")
        return False
    
    return True

def main():
    """Funci√≥n principal del script de verificaci√≥n."""
    print("üöÄ VERIFICACI√ìN R√ÅPIDA DEL SISTEMA DE EJERCICIOS")
    print("="*60)
    
    # Verificar importaciones
    if not test_imports():
        print("\n‚ùå Fallo en las importaciones. Revisa los archivos de ejercicios.")
        return False
    
    # Verificar funcionalidad
    if not test_basic_functionality():
        print("\n‚ùå Fallo en la funcionalidad b√°sica. Revisa la implementaci√≥n.")
        return False
    
    print("\nüéâ ¬°TODAS LAS VERIFICACIONES PASARON!")
    print("‚úÖ El sistema est√° listo para usar")
    print("\nüéØ Para usar el sistema completo, ejecuta:")
    print("   python src/main.py")
    
    return True

if __name__ == "__main__":
    success = main()
    if success:
        print("\nüí° Puedes ejecutar el sistema principal ahora.")
    else:
        print("\nüîß Por favor, revisa los errores antes de continuar.")
    
    sys.exit(0 if success else 1)
